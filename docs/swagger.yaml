swagger: "2.0"
info:
  version: 2.0.0 
  description: "Jira clone API"
  title: "Jira Clone"
  termsOfService: ""
  contact:
    email: "chebaane@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "jira.swagger.io"
basePath: "/v2"
tags:
- name: "project"
  description: "Everything about your project"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "issue"
  description: "Navigate to your issue"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out about users"
    url: "http://swagger.io"
#comment tag was here
schemes:
- "https"
- "http"
paths:
  /project:
    post:
      tags:
      - "project"
      summary: "Add a new project to a user"
      description: ""
      operationId: "addProject"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Project object that needs to be added to a user"
        required: true
        schema:
          $ref: "#/definitions/PostProject"
      responses:
        "405":
          description: "Invalid input"
      security:
      - jira_auth:
        - "write:projects"
        - "read:projects"
        
  /project/{projectId}:
    put:
      tags:
      - "project"
      summary: "Update an existing project"
      description: ""
      operationId: "updateProject"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: path
        name: "projectId"
        description: "Project object that needs to be added to the user"
        type: integer
        required: true
      - in: "body"
        name : "body"
        schema:
          $ref: "#/definitions/PostProject"

      # in need of a schema?
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Project not found"
        "405":
          description: "Validation exception"
      security:
      - jira_auth:
        - "write:projects"
        - "read:projects"
        
    get:
      tags:
      - "project"
      summary: "Find project by ID"
      description: "Returns a single project"
      operationId: "getProjectById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "projectId"
        in: "path"
        description: "ID of project to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Project"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "project not found"
      security:
      - api_key: []
  
  
    delete:
      tags:
      - "project"
      summary: "Deletes a project"
      description: ""
      operationId: "deleteProject"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "projectId"
        in: "path"
        description: "Project id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Project not found"
      security:
      - jira_auth:
        - "write:projects"
        - "read:projects"

      
  /projectv2/{projectId}:
    put:
      tags:
      - "project"
      summary: "Updates a project with form data"
      description: ""
      operationId: "updateProjectWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "projectId"
        in: "path"
        description: "ID of project that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the project"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the project"
        required: false
        type: "string"
      responses:
        "405":
          description: "Invalid input"
      security:
      - jira_auth:
        - "write:projects"
        - "read:projects"
  /project/issues/{projectId}:
    get:
      tags:
      - "issue"
      summary: "Returns issues by project"
      description: "Returns a map of status codes to quantities"
      operationId: "getIssues"
      produces:
      - "application/json"
      parameters: 
        - name : projectId
          in : path
          required : true
          type: integer
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
  /project/issue/{issueId}:
    delete:
      tags:
      -  "issue"
      summary: "Delete a specified issue"
      operationId: "deleteIssue"
      parameters :
      - name : issueId
        in : path
        required : true
        type : integer
      responses:
        "200":
          description: "successful operation"
          
  /issue/comment:
    post:
      tags:
      - "issue"
      summary: "Add a comment inside an issue by a certain user"
      description: ""
      operationId: "addComment"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Descriptive comment body"
        required: true
        schema:
          $ref: "#/definitions/PostComment"
      responses:
        "201":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Comment"
        "400":
          description: "Invalid"
  /issue/{issueId}/comment/:
    get:
      tags:
      - "issue"
      summary: "Get all comments of a certain issue"
      description: "Get your comment"
      operationId: "getComments"
      parameters:
      - in: "path"
        name: "issueId"
        type: integer
        description: "Issue related"
        required: true
      produces:
      - "application/xml"
      - "application/json"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
  /issue/comment/{commentId}:
    delete:
      tags:
      - "issue"
      summary: "Delete a comment by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteComment"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "commentId"
        in: "path"
        description: "ID of the comment that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid ID "
        "404":
          description: "comment not found"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/PostUser"
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/PostUser"
      responses:
        "201":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"

        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"

        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
securityDefinitions:
  jira_auth:
    type: "oauth2"
    authorizationUrl: "http://jira.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:projects: "modify projects"
      read:projects: "read your projects"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:

  Project:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      url:
        type: "string"
      description:
        type: "string"

      category:
        type: "string"
        description: "Category"
        enum:
        - "software"
        - "marketing"
        - "business"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
      issues:
        type: array
        items:
          $ref: "#/definitions/Issue"
      users:
        type: array
        items:
          $ref: "#/definitions/User"

    xml:
      name: "Project"
      
  Issue:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      type:
        type: "string"
        description: "Type"
        enum:
        - "task"
        - "bug"
        - "story"
      status:
        type: "string"
        description: "Status"
        enum:
        - "backlog"
        - "selected"
        - "inprogress"  
        - "done"      
      priority:
        type: "string"
        description: "Priority"
        enum:
        - "5"
        - "4"
        - "3"  
        - "2"
        - '1'
      reporterId:
        type: integer
      project:
        $ref: "#/definitions/Project"
      projectId:
        type: integer
      comments:
        type: array
        items:
          $ref: "#/definitions/Comment"  
      users:
        type: array
        items:
          $ref: "#/definitions/User"
      userIds:
        type: array
        items:
          type: integer
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
        
    xml:
      name: "Issue"
      
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      email:
        type: "string"
      avatarUrl:
        type: "string"
      comments:
        type: array
        items: 
          $ref: "#/definitions/Comment"
      issues:
        type: array
        items: 
          $ref: "#/definitions/Issue"
      project:
        $ref: "#/definitions/Project"
      projectId:
        type: integer
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
      
    xml:
      name: "User"
    
  Comment:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      body:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
      user:
        $ref: "#/definitions/User"
      userId:
        type: integer
      issue:
        $ref: "#/definitions/Issue"
      issueId:
        type: integer
      
    xml:
      name: "Comment"
      
  PostProject:
    type: "object"
    properties:
      name:
        type: "string"
      description:
        type: "string"
      category:
        type: "string"
  PostComment:
    type: "object"
    properties:
      body:
        type: "string"
      userId:
        type: integer
      issueId:
        type: integer
  PostUser:
    type: "object"
    properties:
      name:
        type: string
      email:
        type: string
      avatarUrl:
        type: string
      
      
      
