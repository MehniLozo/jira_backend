swagger: "2.0"
info:
  description: "Jira clone API"
  version: "1.0.0"
  title: "Jira Backend"
  termsOfService: ""
  contact:
    email: "chebaaneaziz28@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost"
basePath: "/api"

tags:
- name: "project"
  description: "Everything about your project"
  externalDocs:
    description: "Find out more"
    url: "http://jira_project"
- name: "issue"
  description: "Navigate to your issue"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about the project"
    url: "http://swagger.io"
#comment tag was here
schemes:
- "https"
- "http"


components:

  schemas:
    UserRegisterDto :
      type: object
      properties:
      id:
        type: integer
      name:
        type: string
      email : 
        type: string
        
    ProjectRegisterDto:
      type: "object"
      properties:
        name:
          type: "string"
        url:
          type: "string"
        description:
          type: "string"
        category:
          type: "string"
          description: "Category"
          enum:
          - "software"
          - "marketing"
          - "business"
    IssueRegisterDto:
      type: "object"
      properties:
        description : "string"
        priority: "string"
        projectId: "number"
        status: "string"
        title: "string"
        type: "string"
        userIds: 
          type: array
          items:
            type: "string"
        users:
          type: array
          items:
              $ref: "#/definitions/User"
          
  


definitions:

  Project:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      url:
        type: "string"
      description:
        type: "string"

      category:
        type: "string"
        description: "Category"
        enum:
        - "software"
        - "marketing"
        - "business"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
      issues:
        type: array
        items:
          $ref: "#/definitions/Issue"
      users:
        type: array
        items:
          $ref: "#/definitions/User"
      
  Issue:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      type:
        type: "string"
        description: "Type"
        enum:
        - "task"
        - "bug"
        - "story"
      status:
        type: "string"
        description: "Status"
        enum:
        - "backlog"
        - "selected"
        - "inprogress"  
        - "done"      
      priority:
        type: "string"
        description: "Priority"
        enum:
        - "5"
        - "4"
        - "3"  
        - "2"
        - '1'
      listPosition: 
        type: integer
      description:
        type: string
      descriptionText:
        type: string
      estimate:
        type: integer
      timeSepnt:
        type: integer
      timeRemaining:
        type: integer
      reporterId:
        type: integer
      project:
        $ref: "#/definitions/Project"
      projectId:
        type: integer
      comments:
        type: array
        items:
          $ref: "#/definitions/Comment"  
      users:
        type: array
        items:
          $ref: "#/definitions/User"
      userIds:
        type: array
        items:
          type: integer
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"

      
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      email:
        type: "string"
      avatarUrl:
        type: "string"
      comments:
        type: array
        items: 
          $ref: "#/definitions/Comment"
      issues:
        type: array
        items: 
          $ref: "#/definitions/Issue"
      project:
        $ref: "#/definitions/Project"
      projectId:
        type: integer
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"

    
  Comment:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      body:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
      user:
        $ref: "#/definitions/User"
      userId:
        type: integer
      issue:
        $ref: "#/definitions/Issue"
      issueId:
        type: integer


      

paths:
  /projects/project:
    post:
      tags:
      - "project"
      summary: "Add a new project to a user"
      description: ""
      operationId: "addProject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Project object that needs to be added to a user"
        required: true
        schema:
          $ref: "#/components/schemas/ProjectRegisterDto"
      responses:
        "201":
          description: "Adding project to Users object"
          schema:
            $ref : "#/definitions/User"
        "405":
          description: "Operation failed"
          
  #############  
  /projects/{projectId}:
    get:
      tags:
      - "project"
      summary: "Find project by ID"
      description: "Returns a single project"
      operationId: "getPetById"
      produces:
      - "application/json"
      parameters:
      - name: "projectId"
        in: "path"
        description: "ID of project to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Project"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Project not found"
      #security:
    put:
      tags:
      - "project"
      summary: "Updates a project with form data"
      description: ""
      operationId: ""
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectId"
        in: "path"
        description: "ID of project that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name : "body"
        in : "body"
        required: true
        schema :
          type: "object"
          properties:
            name:
              type: string
            description:
              type: string
            category:
              type: string
            url:
              type: string
              description: "Url to the project"
      responses:
        "200":
          description: OK
          schema:
              $ref: "#/definitions/Project"
        "404":
          description: "Project not found"
        "405":
          description: "Invalid input"
  
    delete:
      tags:
      - "project"
      summary: "Deletes a project"
      description: ""
      operationId: "deleteProject"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "projectId"
        in: "path"
        description: "Project id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Project deleted"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Project not found"
        
  /projects/{projectId}/issues:
    get:
      tags:
      - "issue"
      summary: "Returns issues by project"
      description: "Returns a map of status codes to quantities"
      operationId: "searchIssue"
      produces:
      - "application/json"
      parameters: 
        - name : projectId
          in : path
          required : true
          type: integer
        ###other query parameter here
        - in : query
          name : searchTerm
          required: false
          type: string
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
             $ref: "#/definitions/Issue"
        "404" :
          description : "Project doesn't exist"
      security:
      - api_key: []

  /projects/issues/:
    post:
      tags:
      - "issue"
      summary: "Create an issue in a given project"
      operationId: "addIssue"
      parameters:
      - name : "body"
        in : "body"
        schema:
          $ref: "#/components/schemas/IssueRegisterDto"
        required : true

      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
             $ref: "#/definitions/Issue"
        "400":
          description: "Something's wrong"
        "405" :
          description : "Project couldn't be saved"

  
  
      
  /projects/{projectId}/issues/{issueId}/:
    get:
      tags:
      - "issue"
      summary: "Returns issue"
      description: "Consult your wished issue from the board"
      operationId: "findIssueById"
      produces:
      - "application/json"
      parameters: 
        - name : issueId
          in : path
          required : true
          type: integer
        - name: projectId
          in: path
          required: true
          type: integer
      responses:
        "200":
          description: "Issue retrieved"
          schema:
            $ref: "#/definitions/Issue"
        "404" :
          description : "Issue doesn't exist"
      security:
      - api_key: []
    put:
      tags:
      - "issue"
      summary: "Modifies an issue"
      description: "Adjust your wished issue"
      operationId: "updateIssue"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: 
        - name : issueId
          in : path
          required : true
          type: integer
        - name: projectId
          in: path
          required : true
          type: integer
        - name : "body"
          in : "body"
          required: true
          schema :
            type: "object"
            properties:
              title:
                type: string
              description:
                type: string
              status:
                type: "string"
                description: "Status"
                enum:
                - "backlog"
                - "selected"
                - "inprogress"  
                - "done"
              userIds:
                type: array
                items:
                  type: integer
              users:
                type: array
                items:
                  $ref: "#/definitions/User"
              reporterId:
                type: integer
              priority:
                type: string
              estimate:
                type: integer
              timeSpent:
                type: integer
              timeRemaning:
                type: integer
      responses:
        "201":
          description: "Issue has successfully changed"
          schema:
            $ref: "#/definitions/Issue"
        "404" :
          description : "Issue doesn't exist"
      security:
      - api_key: []
    
    delete:
      tags:
      - "issue"
      summary: "Delete an issue"
      operationId : "deleteIssue"
      parameters:
      - name : issueId
        in : path
        required: true
        type: integer
      - name : projectId
        in : path
        required: true
        type: integer
      responses:
        "200":
          description : "Issue has been successfully deleted"
        "404":
          description : "Project not found"
      
  
  /issues/{issueId}/comments:
    post:
      tags:
      - "comment"
      summary: "Add a comment inside an issue by a certain user"
      description: ""
      operationId: "addComment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name : "issueId"
        required : true
        type: integer
      
      - in: "body"
        name: "body"
        description: "comment object"
        required: true
        schema:
          $ref: "#/definitions/Comment"
      responses:
        "201":
          description: "successful comment operation"
          schema:
            $ref: "#/definitions/Comment"
        "405":
          description: "Invalid input"
      #security: #soon
  
    get:
      tags:
      - "comment"
      summary: "Get all comments of a certain issue"
      description: "Get your comment"
      operationId: "getComments"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name : "issueId"
        required: true
        type: integer
      responses:
        "200":
          description: "successful operation"
          schema: 
            type: array
            items: 
              $ref : "#/definitions/Comment"  
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
          
  /issues/{issueId}/comments/{commentId}:
    put:
      tags:
      - "comment"
      summary: "Edit a comment"
      description: "edit your comment"
      operationId: "editComment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - in : "path"
          name : commentId
          type: integer
          required: true
        - in: "path"
          name: issueId
          type: integer
          required: true
        - in: "body"
          name: "body"
          description: "Pet object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Comment"  
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Comment"  

        "400":
          description: "Invalid ID supplied"
        "404":
          description: "comment not found"
    delete:
      tags:
      - "comment"
      summary: "Delete a comment by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteComment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name : "issueId"
        in: "path"
        required: true
        type: integer
      - name: "commentId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description : "Comment has just been deleted"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
  /users/register:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/components/schemas/UserRegisterDto"
      responses:
        "201":
          description: "User has been successfully added"
        "405":
          description: "Invalid input"
  /users/{userId}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      parameters:
      - name: "userId"
        in: "path"
        description: "Id of the user that needs to be fetched. "
        required: true
        type: integer
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "Id of the user that needs to be updated. "
        required: true
        type: integer
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200": 
          description: "User has been just updated"
          schema:
              $ref: "#/definitions/User"

            
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "Id of the user that needs to be deleted. "
        required: true
        type: integer
      responses:
        "200": 
          description: "User has been successfully deleted"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"

